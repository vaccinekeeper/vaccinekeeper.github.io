{"ts":1377196705027,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require \"rubygems\"\nrequire \"bundler/setup\"\nrequire \"stringex\"\n\n## -- Rsync Deploy config -- ##\n# Be sure your public key is listed in your server's ~/.ssh/authorized_keys file\nssh_user       = \"user@domain.com\"\nssh_port       = \"22\"\ndocument_root  = \"~/website.com/\"\nrsync_delete   = false\nrsync_args     = \"\"  # Any extra arguments to pass to rsync\ndeploy_default = \"push\"\n\n# This will be configured for you when you run config_deploy\ndeploy_branch  = \"master\"\n\n## -- Misc Configs -- ##\n\npublic_dir      = \"public\"    # compiled site directory\nsource_dir      = \"source\"    # source file directory\nblog_index_dir  = 'source'    # directory for your blog's index page (if you put your index in source/blog/index.html, set this to 'source/blog')\ndeploy_dir      = \"_deploy\"   # deploy directory (for Github pages deployment)\nstash_dir       = \"_stash\"    # directory to stash posts for speedy generation\nposts_dir       = \"_posts\"    # directory for blog files\nthemes_dir      = \".themes\"   # directory for blog files\nnew_post_ext    = \"markdown\"  # default new post file extension when using the new_post task\nnew_page_ext    = \"markdown\"  # default new page file extension when using the new_page task\nserver_port     = \"4000\"      # port for preview server eg. localhost:4000\n\n\ndesc \"Initial setup for Octopress: copies the default theme into the path of Jekyll's generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]\"\ntask :install, :theme do |t, args|\n  if File.directory?(source_dir) || File.directory?(\"sass\")\n    abort(\"rake aborted!\") if ask(\"A theme is already installed, proceeding will overwrite existing files. Are you sure?\", ['y', 'n']) == 'n'\n  end\n  # copy theme into working Jekyll directories\n  theme = args.theme || 'classic'\n  puts \"## Copying \"+theme+\" theme into ./#{source_dir} and ./sass\"\n  mkdir_p source_dir\n  cp_r \"#{themes_dir}/#{theme}/source/.\", source_dir\n  mkdir_p \"sass\"\n  cp_r \"#{themes_dir}/#{theme}/sass/.\", \"sass\"\n  mkdir_p \"#{source_dir}/#{posts_dir}\"\n  mkdir_p public_dir\nend\n\n#######################\n# Working with Jekyll #\n#######################\n\ndesc \"Generate jekyll site\"\ntask :generate do\n  raise \"### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.\" unless File.directory?(source_dir)\n  puts \"## Generating Site with Jekyll\"\n  system \"compass compile --css-dir #{source_dir}/stylesheets\"\n  system \"jekyll\"\nend\n\ndesc \"Watch the site and regenerate when it changes\"\ntask :watch do\n  raise \"### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.\" unless File.directory?(source_dir)\n  puts \"Starting to watch source with Jekyll and Compass.\"\n  system \"compass compile --css-dir #{source_dir}/stylesheets\" unless File.exist?(\"#{source_dir}/stylesheets/screen.css\")\n  jekyllPid = Process.spawn({\"OCTOPRESS_ENV\"=>\"preview\"}, \"jekyll --auto\")\n  compassPid = Process.spawn(\"compass watch\")\n\n  trap(\"INT\") {\n    [jekyllPid, compassPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }\n    exit 0\n  }\n\n  [jekyllPid, compassPid].each { |pid| Process.wait(pid) }\nend\n\ndesc \"preview the site in a web browser\"\ntask :preview do\n  raise \"### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.\" unless File.directory?(source_dir)\n  puts \"Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}\"\n  system \"compass compile --css-dir #{source_dir}/stylesheets\" unless File.exist?(\"#{source_dir}/stylesheets/screen.css\")\n  jekyllPid = Process.spawn({\"OCTOPRESS_ENV\"=>\"preview\"}, \"jekyll --auto\")\n  compassPid = Process.spawn(\"compass watch\")\n  rackupPid = Process.spawn(\"rackup --port #{server_port}\")\n\n  trap(\"INT\") {\n    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }\n    exit 0\n  }\n\n  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }\nend\n\n# usage rake new_post[my-new-post] or rake new_post['my new post'] or rake new_post (defaults to \"new-post\")\ndesc \"Begin a new post in #{source_dir}/#{posts_dir}\"\ntask :new_post, :title do |t, args|\n  if args.title\n    title = args.title\n  else\n    title = get_stdin(\"Enter a title for your post: \")\n  end\n  raise \"### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.\" unless File.directory?(source_dir)\n  mkdir_p \"#{source_dir}/#{posts_dir}\"\n  filename = \"#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}\"\n  if File.exist?(filename)\n    abort(\"rake aborted!\") if ask(\"#{filename} already exists. Do you want to overwrite?\", ['y', 'n']) == 'n'\n  end\n  puts \"Creating new post: #{filename}\"\n  open(filename, 'w') do |post|\n    post.puts \"---\"\n    post.puts \"layout: post\"\n    post.puts \"title: \\\"#{title.gsub(/&/,'&amp;')}\\\"\"\n    post.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\n    post.puts \"comments: true\"\n    post.puts \"categories: \"\n    post.puts \"---\"\n  end\nend\n\n# usage rake new_page[my-new-page] or rake new_page[my-new-page.html] or rake new_page (defaults to \"new-page.markdown\")\ndesc \"Create a new page in #{source_dir}/(filename)/index.#{new_page_ext}\"\ntask :new_page, :filename do |t, args|\n  raise \"### You haven't set anything up yet. First run `rake install` to set up an Octopress theme.\" unless File.directory?(source_dir)\n  args.with_defaults(:filename => 'new-page')\n  page_dir = [source_dir]\n  if args.filename.downcase =~ /(^.+\\/)?(.+)/\n    filename, dot, extension = $2.rpartition('.').reject(&:empty?)         # Get filename and extension\n    title = filename\n    page_dir.concat($1.downcase.sub(/^\\//, '').split('/')) unless $1.nil?  # Add path to page_dir Array\n    if extension.nil?\n      page_dir << filename\n      filename = \"index\"\n    end\n    extension ||= new_page_ext\n    page_dir = page_dir.map! { |d| d = d.to_url }.join('/')                # Sanitize path\n    filename = filename.downcase.to_url\n\n    mkdir_p page_dir\n    file = \"#{page_dir}/#{filename}.#{extension}\"\n    if File.exist?(file)\n      abort(\"rake aborted!\") if ask(\"#{file} already exists. Do you want to overwrite?\", ['y', 'n']) == 'n'\n    end\n    puts \"Creating new page: #{file}\"\n    open(file, 'w') do |page|\n      page.puts \"---\"\n      page.puts \"layout: page\"\n      page.puts \"title: \\\"#{title}\\\"\"\n      page.puts \"date: #{Time.now.strftime('%Y-%m-%d %H:%M')}\"\n      page.puts \"comments: true\"\n      page.puts \"sharing: true\"\n      page.puts \"footer: true\"\n      page.puts \"---\"\n    end\n  else\n    puts \"Syntax error: #{args.filename} contains unsupported characters\"\n  end\nend\n\n# usage rake isolate[my-post]\ndesc \"Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly.\"\ntask :isolate, :filename do |t, args|\n  stash_dir = \"#{source_dir}/#{stash_dir}\"\n  FileUtils.mkdir(stash_dir) unless File.exist?(stash_dir)\n  Dir.glob(\"#{source_dir}/#{posts_dir}/*.*\") do |post|\n    FileUtils.mv post, stash_dir unless post.include?(args.filename)\n  end\nend\n\ndesc \"Move all stashed posts back into the posts directory, ready for site generation.\"\ntask :integrate do\n  FileUtils.mv Dir.glob(\"#{source_dir}/#{stash_dir}/*.*\"), \"#{source_dir}/#{posts_dir}/\"\nend\n\ndesc \"Clean out caches: .pygments-cache, .gist-cache, .sass-cache\"\ntask :clean do\n  rm_rf [\".pygments-cache/**\", \".gist-cache/**\", \".sass-cache/**\", \"source/stylesheets/screen.css\"]\nend\n\ndesc \"Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom\"\ntask :update_style, :theme do |t, args|\n  theme = args.theme || 'classic'\n  if File.directory?(\"sass.old\")\n    puts \"removed existing sass.old directory\"\n    rm_r \"sass.old\", :secure=>true\n  end\n  mv \"sass\", \"sass.old\"\n  puts \"## Moved styles into sass.old/\"\n  cp_r \"#{themes_dir}/\"+theme+\"/sass/\", \"sass\"\n  cp_r \"sass.old/custom/.\", \"sass/custom\"\n  puts \"## Updated Sass ##\"\nend\n\ndesc \"Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old's navigation\"\ntask :update_source, :theme do |t, args|\n  theme = args.theme || 'classic'\n  if File.directory?(\"#{source_dir}.old\")\n    puts \"## Removed existing #{source_dir}.old directory\"\n    rm_r \"#{source_dir}.old\", :secure=>true\n  end\n  mkdir \"#{source_dir}.old\"\n  cp_r \"#{source_dir}/.\", \"#{source_dir}.old\"\n  puts \"## Copied #{source_dir} into #{source_dir}.old/\"\n  cp_r \"#{themes_dir}/\"+theme+\"/source/.\", source_dir, :remove_destination=>true\n  cp_r \"#{source_dir}.old/_includes/custom/.\", \"#{source_dir}/_includes/custom/\", :remove_destination=>true\n  cp \"#{source_dir}.old/favicon.png\", source_dir\n  mv \"#{source_dir}/index.html\", \"#{blog_index_dir}\", :force=>true if blog_index_dir != source_dir\n  cp \"#{source_dir}.old/index.html\", source_dir if blog_index_dir != source_dir && File.exists?(\"#{source_dir}.old/index.html\")\n  puts \"## Updated #{source_dir} ##\"\nend\n\n##############\n# Deploying  #\n##############\n\ndesc \"Default deploy task\"\ntask :deploy do\n  # Check if preview posts exist, which should not be published\n  if File.exists?(\".preview-mode\")\n    puts \"## Found posts in preview mode, regenerating files ...\"\n    File.delete(\".preview-mode\")\n    Rake::Task[:generate].execute\n  end\n\n  Rake::Task[:copydot].invoke(source_dir, public_dir)\n  Rake::Task[\"#{deploy_default}\"].execute\nend\n\ndesc \"Generate website and deploy\"\ntask :gen_deploy => [:integrate, :generate, :deploy] do\nend\n\ndesc \"copy dot files for deployment\"\ntask :copydot, :source, :dest do |t, args|\n  FileList[\"#{args.source}/**/.*\"].exclude(\"**/.\", \"**/..\", \"**/.DS_Store\", \"**/._*\").each do |file|\n    cp_r file, file.gsub(/#{args.source}/, \"#{args.dest}\") unless File.directory?(file)\n  end\nend\n\ndesc \"Deploy website via rsync\"\ntask :rsync do\n  exclude = \"\"\n  if File.exists?('./rsync-exclude')\n    exclude = \"--exclude-from '#{File.expand_path('./rsync-exclude')}'\"\n  end\n  puts \"## Deploying website via Rsync\"\n  ok_failed system(\"rsync -avze 'ssh -p #{ssh_port}' #{exclude} #{rsync_args} #{\"--delete\" unless rsync_delete == false} #{public_dir}/ #{ssh_user}:#{document_root}\")\nend\n\ndesc \"deploy public directory to github pages\"\nmultitask :push do\n  puts \"## Deploying branch to Github Pages \"\n  puts \"## Pulling any updates from Github Pages \"\n  cd \"#{deploy_dir}\" do \n    system \"git pull\"\n  end\n  (Dir[\"#{deploy_dir}/*\"]).each { |f| rm_rf(f) }\n  Rake::Task[:copydot].invoke(public_dir, deploy_dir)\n  puts \"\\n## Copying #{public_dir} to #{deploy_dir}\"\n  cp_r \"#{public_dir}/.\", deploy_dir\n  cd \"#{deploy_dir}\" do\n    system \"git add -A\"\n    puts \"\\n## Commiting: Site updated at #{Time.now.utc}\"\n    message = \"Site updated at #{Time.now.utc}\"\n    system \"git commit -m \\\"#{message}\\\"\"\n    puts \"\\n## Pushing generated #{deploy_dir} website\"\n    system \"git push origin #{deploy_branch}\"\n    puts \"\\n## Github Pages deploy complete\"\n  end\nend\n\ndesc \"Update configurations to support publishing to root or sub directory\"\ntask :set_root_dir, :dir do |t, args|\n  puts \">>> !! Please provide a directory, eg. rake config_dir[publishing/subdirectory]\" unless args.dir\n  if args.dir\n    if args.dir == \"/\"\n      dir = \"\"\n    else\n      dir = \"/\" + args.dir.sub(/(\\/*)(.+)/, \"\\\\2\").sub(/\\/$/, '');\n    end\n    rakefile = IO.read(__FILE__)\n    rakefile.sub!(/public_dir(\\s*)=(\\s*)([\"'])[\\w\\-\\/]*[\"']/, \"public_dir\\\\1=\\\\2\\\\3public#{dir}\\\\3\")\n    File.open(__FILE__, 'w') do |f|\n      f.write rakefile\n    end\n    compass_config = IO.read('config.rb')\n    compass_config.sub!(/http_path(\\s*)=(\\s*)([\"'])[\\w\\-\\/]*[\"']/, \"http_path\\\\1=\\\\2\\\\3#{dir}/\\\\3\")\n    compass_config.sub!(/http_images_path(\\s*)=(\\s*)([\"'])[\\w\\-\\/]*[\"']/, \"http_images_path\\\\1=\\\\2\\\\3#{dir}/images\\\\3\")\n    compass_config.sub!(/http_fonts_path(\\s*)=(\\s*)([\"'])[\\w\\-\\/]*[\"']/, \"http_fonts_path\\\\1=\\\\2\\\\3#{dir}/fonts\\\\3\")\n    compass_config.sub!(/css_dir(\\s*)=(\\s*)([\"'])[\\w\\-\\/]*[\"']/, \"css_dir\\\\1=\\\\2\\\\3public#{dir}/stylesheets\\\\3\")\n    File.open('config.rb', 'w') do |f|\n      f.write compass_config\n    end\n    jekyll_config = IO.read('_config.yml')\n    jekyll_config.sub!(/^destination:.+$/, \"destination: public#{dir}\")\n    jekyll_config.sub!(/^subscribe_rss:\\s*\\/.+$/, \"subscribe_rss: #{dir}/atom.xml\")\n    jekyll_config.sub!(/^root:.*$/, \"root: /#{dir.sub(/^\\//, '')}\")\n    File.open('_config.yml', 'w') do |f|\n      f.write jekyll_config\n    end\n    rm_rf public_dir\n    mkdir_p \"#{public_dir}#{dir}\"\n    puts \"## Site's root directory is now '/#{dir.sub(/^\\//, '')}' ##\"\n  end\nend\n\ndesc \"Set up _deploy folder and deploy branch for Github Pages deployment\"\ntask :setup_github_pages, :repo do |t, args|\n  if args.repo\n    repo_url = args.repo\n  else\n    puts \"Enter the read/write url for your repository\"\n    puts \"(For example, 'git@github.com:your_username/your_username.github.io)\"\n    puts \"           or 'https://github.com/your_username/your_username.github.io')\"\n    repo_url = get_stdin(\"Repository url: \")\n  end\n  protocol = (repo_url.match(/(^git)@/).nil?) ? 'https' : 'git'\n  if protocol == 'git'\n    user = repo_url.match(/:([^\\/]+)/)[1]\n  else\n    user = repo_url.match(/github\\.com\\/([^\\/]+)/)[1]\n  end\n  branch = (repo_url.match(/\\/[\\w-]+\\.github\\.(?:io|com)/).nil?) ? 'gh-pages' : 'master'\n  project = (branch == 'gh-pages') ? repo_url.match(/\\/([^\\.]+)/)[1] : ''\n  unless (`git remote -v` =~ /origin.+?octopress(?:\\.git)?/).nil?\n    # If octopress is still the origin remote (from cloning) rename it to octopress\n    system \"git remote rename origin octopress\"\n    if branch == 'master'\n      # If this is a user/organization pages repository, add the correct origin remote\n      # and checkout the source branch for committing changes to the blog source.\n      system \"git remote add origin #{repo_url}\"\n      puts \"Added remote #{repo_url} as origin\"\n      system \"git config branch.master.remote origin\"\n      puts \"Set origin as default remote\"\n      system \"git branch -m master source\"\n      puts \"Master branch renamed to 'source' for committing your blog source files\"\n    else\n      unless !public_dir.match(\"#{project}\").nil?\n        system \"rake set_root_dir[#{project}]\"\n      end\n    end\n  end\n  url = \"http://#{user}.github.io\"\n  url += \"/#{project}\" unless project == ''\n  jekyll_config = IO.read('_config.yml')\n  jekyll_config.sub!(/^url:.*$/, \"url: #{url}\")\n  File.open('_config.yml', 'w') do |f|\n    f.write jekyll_config\n  end\n  rm_rf deploy_dir\n  mkdir deploy_dir\n  cd \"#{deploy_dir}\" do\n    system \"git init\"\n    system \"echo 'My Octopress Page is coming soon &hellip;' > index.html\"\n    system \"git add .\"\n    system \"git commit -m \\\"Octopress init\\\"\"\n    system \"git branch -m gh-pages\" unless branch == 'master'\n    system \"git remote add origin #{repo_url}\"\n    rakefile = IO.read(__FILE__)\n    rakefile.sub!(/deploy_branch(\\s*)=(\\s*)([\"'])[\\w-]*[\"']/, \"deploy_branch\\\\1=\\\\2\\\\3#{branch}\\\\3\")\n    rakefile.sub!(/deploy_default(\\s*)=(\\s*)([\"'])[\\w-]*[\"']/, \"deploy_default\\\\1=\\\\2\\\\3push\\\\3\")\n    File.open(__FILE__, 'w') do |f|\n      f.write rakefile\n    end\n  end\n  puts \"\\n---\\n## Now you can deploy to #{url} with `rake deploy` ##\"\nend\n\ndef ok_failed(condition)\n  if (condition)\n    puts \"OK\"\n  else\n    puts \"FAILED\"\n  end\nend\n\ndef get_stdin(message)\n  print message\n  STDIN.gets.chomp\nend\n\ndef ask(message, valid_options)\n  if valid_options\n    answer = get_stdin(\"#{message} #{valid_options.to_s.gsub(/\"/, '').gsub(/, /,'/')} \") while !valid_options.include?(answer)\n  else\n    answer = get_stdin(message)\n  end\n  answer\nend\n\ndesc \"list tasks\"\ntask :list do\n  puts \"Tasks: #{(Rake::Task.tasks - [Rake::Task[:list]]).join(', ')}\"\n  puts \"(type rake -T for more detail)\\n\\n\"\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":15657}]],"length":15657}
{"contributors":[],"silentsave":false,"ts":1377196726001,"patch":[[{"diffs":[[0,"ge task\n"],[1,"#"],[0,"server_p"]],"start1":1195,"start2":1195,"length1":16,"length2":17},{"diffs":[[0,"st:4000\n"],[1,"server_host     = ENV['IP'] ||= '0.0.0.0'     # server bind address for preview server\nserver_port     = ENV['PORT'] ||= \"4000\"      # port for preview server eg. localhost:4000"],[0,"\n\ndesc \""]],"start1":1271,"start2":1271,"length1":16,"length2":193}]],"length":15835,"saved":false}
{"ts":1377196746584,"patch":[[{"diffs":[[0,"watch\")\n"],[1,"#rackupPid = Process.spawn(\"rackup --port #{server_port}\")\n"],[0,"  rackup"]],"start1":3857,"start2":3857,"length1":16,"length2":75},{"diffs":[[0,"ss.spawn(\"rackup"],[1," --host #{server_host}"],[0," --port #{server"]],"start1":3943,"start2":3943,"length1":32,"length2":54}]],"length":15916,"saved":false}
{"contributors":[],"silentsave":false,"ts":1377203391004,"patch":[[{"diffs":[[0," origin "],[1,"+"],[0,"#{deploy"]],"start1":11088,"start2":11088,"length1":16,"length2":17}]],"length":15917,"saved":false}
{"ts":1377203423451,"patch":[[{"diffs":[[0," origin "],[-1,"+"],[0,"#{deploy"]],"start1":11088,"start2":11088,"length1":17,"length2":16}]],"length":15916,"saved":false}
